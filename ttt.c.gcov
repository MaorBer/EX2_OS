        -:    0:Source:ttt.c
        -:    0:Graph:ttt.gcno
        -:    0:Data:ttt.gcda
        -:    0:Runs:77
        -:    1:#include <stdio.h>
        -:    2:#include <string.h>
        -:    3:#include <stdlib.h>
        -:    4:#include <ctype.h>
        -:    5:
        -:    6:#define MAX_NUMS 9
        -:    7:
       76:    8:int validate_strategy(const char *strategy) {
       76:    9:    if (strlen(strategy) != MAX_NUMS) {
       20:   10:        return 1;
        -:   11:    }
        -:   12:
      500:   13:    for (int i = 0; i < MAX_NUMS; i++) {
      454:   14:        if (strategy[i] < '1' || strategy[i] > '9') {
    #####:   15:            return 1;
        -:   16:        }
        -:   17:        
     2160:   18:        for (int j = i - 1; j >= 0; j--) {
     1716:   19:            if (strategy[i] == strategy[j]) {
       10:   20:                return 1;
        -:   21:            }
        -:   22:        }
        -:   23:    }
        -:   24:
       46:   25:    return 0;
        -:   26:}
        -:   27:
      255:   28:int validate_move(int player_move, const char *board){
      209:   29:    return(board[player_move - 1] == 'O' || board[player_move - 1] == 'X'||
      464:   30:            player_move < 1 || player_move > MAX_NUMS);
        -:   31:    }
        -:   32:
       80:   33:char next_move(const char *strategy, const char *board) {
        -:   34:    
      189:   35:    for(int i = 0; i < MAX_NUMS; i++){
      189:   36:        if(!validate_move((strategy[i]- '0'), board)){
       80:   37:            return strategy[i];
        -:   38:        }
        -:   39:    }
        -:   40:    
    #####:   41:    return '\0';
        -:   42:}
        -:   43:
      119:   44:int check_winner(const char *board, char player) {
      119:   45:    const int winning_combinations[8][3] = {
        -:   46:        {0, 1, 2}, {3, 4, 5}, {6, 7, 8}, // rows
        -:   47:        {0, 3, 6}, {1, 4, 7}, {2, 5, 8}, // columns
        -:   48:        {0, 4, 8}, {2, 4, 6}             // diagonals
        -:   49:    };
     1052:   50:    for (int i = 0; i < 8; ++i) {
      939:   51:        if (board[winning_combinations[i][0]] == player &&
      331:   52:            board[winning_combinations[i][1]] == player &&
       57:   53:            board[winning_combinations[i][2]] == player) {
        6:   54:            return 1;
        -:   55:        }
        -:   56:    }
      113:   57:    return 0;
        -:   58:}
        -:   59:
       77:   60:int main(int argc, char *argv[]) 
        -:   61:{
        -:   62:    char board[10];
       77:   63:    if (argc != 2) {
        1:   64:        printf("Error\n");
        1:   65:        return 1;
        -:   66:    }
        -:   67:
       76:   68:    const char *strategy = argv[1];
       76:   69:    if (validate_strategy(strategy)) {
       30:   70:        printf("Error\n");
       30:   71:        return 1;
        -:   72:    }
        -:   73:    
       46:   74:    int round = 0;
       82:   75:    while (round < 4) {
       80:   76:        char move = next_move(strategy, board);
       80:   77:        if (move == '\0') {
    #####:   78:            printf("Error\n");
      44*:   79:            return 1;
        -:   80:        }
       80:   81:        fprintf(stdout,"%c\n", move);
        -:   82:
       80:   83:        board[move - '1'] = 'X';
       80:   84:        if (check_winner(board, 'X')) {
        3:   85:            printf("I win\n");
        3:   86:            return 0;
        -:   87:        }
        -:   88:
        -:   89:        // Read player's move
        -:   90:        int player_move;
       77:   91:        if (scanf("%d", &player_move) != 1 || validate_move(player_move, board)) {
       38:   92:            printf("Error4\n");
       38:   93:            return 1;
        -:   94:        }
       39:   95:        board[player_move - 1] = 'O';
        -:   96:
       39:   97:        if (check_winner(board, 'O')) {
        3:   98:            printf("I lose\n");
        3:   99:            return 0;
        -:  100:        }
       36:  101:        round++;
        -:  102:    }
        2:  103:    printf("Draw");
        2:  104:    return 0;
        -:  105:}
