        -:    0:Source:mync.c
        -:    0:Graph:mync.gcno
        -:    0:Data:mync.gcda
        -:    0:Runs:6
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <unistd.h>
        -:    4:#include <string.h>
        -:    5:#include <sys/wait.h>
        -:    6:#include <getopt.h>
        -:    7:#include <errno.h>
        -:    8:#include <sys/socket.h>
        -:    9:#include <netinet/in.h>
        -:   10:#include <arpa/inet.h>
        -:   11:#include <signal.h>
        -:   12:#include <sys/types.h>
        -:   13:#include <unistd.h>
        -:   14:#include <sys/un.h>
        -:   15:
        -:   16:#define SOCKET_PATH "/tmp/unix_socket_example"
        -:   17:#define BUFFER_SIZE 1024
        -:   18:
        -:   19:char *socket_path;
        -:   20:int udp_socket;
        -:   21:volatile sig_atomic_t time_up = 0;
        -:   22:
    #####:   23:void uds_client_datagram(char *socket_path, char **args)
        -:   24:{
        -:   25:    // create a socket
    #####:   26:    int sockfd = socket(AF_UNIX, SOCK_DGRAM, 0);
    #####:   27:    if (sockfd == -1)
        -:   28:    {
    #####:   29:        perror("error creating socket");
    #####:   30:        exit(EXIT_FAILURE);
        -:   31:    }
        -:   32:
        -:   33:    // connect to the server
        -:   34:    struct sockaddr_un addr;
    #####:   35:    addr.sun_family = AF_UNIX;
    #####:   36:    strcpy(addr.sun_path, socket_path);
        -:   37:
        -:   38:    // connect the socket to the server
    #####:   39:    if (connect(sockfd, (struct sockaddr *)&addr, sizeof(addr)) == -1)
        -:   40:    {
    #####:   41:        perror("error connecting socket");
    #####:   42:        exit(EXIT_FAILURE);
        -:   43:    }
        -:   44:
    #####:   45:    dup2(sockfd, STDIN_FILENO);
    #####:   46:    execv(args[0], args);
    #####:   47:}
        -:   48:
    #####:   49:void uds_client_stream(char *socket_path, char **args)
        -:   50:{
        -:   51:    // create a socket
    #####:   52:    int sockfd = socket(AF_UNIX, SOCK_STREAM, 0);
    #####:   53:    if (sockfd == -1)
        -:   54:    {
    #####:   55:        perror("error creating socket");
    #####:   56:        exit(EXIT_FAILURE);
        -:   57:    }
        -:   58:
        -:   59:    // connect to the server
        -:   60:    struct sockaddr_un addr;
    #####:   61:    addr.sun_family = AF_UNIX;
    #####:   62:    strcpy(addr.sun_path, socket_path);
        -:   63:
    #####:   64:    if (connect(sockfd, (struct sockaddr *)&addr, sizeof(addr)) == -1)
        -:   65:    {
    #####:   66:        perror("error connecting to server");
    #####:   67:        exit(EXIT_FAILURE);
        -:   68:    }
        -:   69:
    #####:   70:    dup2(sockfd, STDOUT_FILENO);
    #####:   71:    execv(args[0], args);
    #####:   72:}
        -:   73:
    #####:   74:void uds_server_datagram(char *socket_path, char **args)
        -:   75:{
        -:   76:    // create a socket
    #####:   77:    int sockfd = socket(AF_UNIX, SOCK_DGRAM, 0);
    #####:   78:    if (sockfd == -1)
        -:   79:    {
    #####:   80:        perror("error creating socket");
    #####:   81:        exit(EXIT_FAILURE);
        -:   82:    }
        -:   83:
        -:   84:    // bind the socket to the address
        -:   85:    struct sockaddr_un addr;
    #####:   86:    addr.sun_family = AF_UNIX;
    #####:   87:    strcpy(addr.sun_path, socket_path);
        -:   88:
    #####:   89:    if (bind(sockfd, (struct sockaddr *)&addr, sizeof(addr)) == -1)
        -:   90:    {
    #####:   91:        printf("%s\n", addr.sun_path);
    #####:   92:        perror("error binding socket");
    #####:   93:        exit(EXIT_FAILURE);
        -:   94:    }
        -:   95:
        -:   96:    // receive dummy data to get the client address
        -:   97:    char buffer[1024];
        -:   98:    struct sockaddr_un client_addr;
    #####:   99:    socklen_t client_addr_len = sizeof(client_addr);
        -:  100:
    #####:  101:    int bytes_received = recvfrom(sockfd, buffer, sizeof(buffer), 0, (struct sockaddr *)&client_addr, &client_addr_len);
    #####:  102:    if (bytes_received == -1)
        -:  103:    {
    #####:  104:        perror("error receiving data");
    #####:  105:        exit(EXIT_FAILURE);
        -:  106:    }
        -:  107:
    #####:  108:    dup2(sockfd, STDIN_FILENO);
    #####:  109:    execv(args[0], args);
    #####:  110:}
        -:  111:
    #####:  112:void uds_server_stream(char *socket_path, char **args)
        -:  113:{
        -:  114:    // create a socket
    #####:  115:    int sockfd = socket(AF_UNIX, SOCK_STREAM, 0);
    #####:  116:    if (sockfd == -1)
        -:  117:    {
    #####:  118:        perror("error creating socket");
    #####:  119:        exit(EXIT_FAILURE);
        -:  120:    }
        -:  121:
        -:  122:    // bind the socket to the address
        -:  123:    struct sockaddr_un addr;
    #####:  124:    addr.sun_family = AF_UNIX;
    #####:  125:    strcpy(addr.sun_path, socket_path);
        -:  126:
        -:  127:
    #####:  128:    unlink(addr.sun_path); // remove the socket file if it already exists
    #####:  129:    if (bind(sockfd, (struct sockaddr *)&addr, sizeof(addr)) == -1)
        -:  130:    {
    #####:  131:        perror("error binding socket");
    #####:  132:        close(sockfd);
    #####:  133:        exit(EXIT_FAILURE);
        -:  134:    }
        -:  135:
        -:  136:    // listen for incoming connections - at most 1
    #####:  137:    if (listen(sockfd, 1) == -1)
        -:  138:    {
    #####:  139:        perror("error listening on socket");
    #####:  140:        close(sockfd);
    #####:  141:        exit(EXIT_FAILURE);
        -:  142:    }
        -:  143:
    #####:  144:    printf("Server is listening...\n");
        -:  145:
        -:  146:
        -:  147:    // accept the connection and change the input_fd to the new socket
        -:  148:    struct sockaddr_un client_addr;
    #####:  149:    socklen_t client_addr_len = sizeof(client_addr);
    #####:  150:    int client_fd = accept(sockfd, (struct sockaddr *)&client_addr, &client_addr_len);
        -:  151:
    #####:  152:    if (client_fd == -1)
        -:  153:    {
    #####:  154:        perror("error accepting connection");
    #####:  155:        close(sockfd);
    #####:  156:        exit(EXIT_FAILURE);
        -:  157:    }
        -:  158:
    #####:  159:    dup2(client_fd, STDIN_FILENO);
    #####:  160:    execv(args[0], args);
    #####:  161:}
        -:  162:
    #####:  163:void print_usage(const char *prog_name)
        -:  164:{
    #####:  165:    fprintf(stderr, "Usage: %s -e <command> [-i <input>] [-o <output>] [-b <both>]\n", prog_name);
    #####:  166:}
        -:  167:
        2:  168:int s_socket_tcp(int port)
        -:  169:{
        -:  170:
        2:  171:    int server_socket = 0;
        -:  172:    struct sockaddr_in server_address;
        -:  173:
        2:  174:    server_socket = socket(AF_INET, SOCK_STREAM, 0);
        2:  175:    if (server_socket == -1)
        -:  176:    {
    #####:  177:        perror("socket");
    #####:  178:        exit(EXIT_FAILURE);
        -:  179:    }
        -:  180:
        2:  181:    server_address.sin_family = AF_INET;
        2:  182:    server_address.sin_addr.s_addr = INADDR_ANY;
        2:  183:    server_address.sin_port = htons(port);
        -:  184:
        2:  185:    if (bind(server_socket, (struct sockaddr *)&server_address, sizeof(server_address)) == -1)
        -:  186:    {
    #####:  187:        perror("bind");
    #####:  188:        exit(EXIT_FAILURE);
        -:  189:    }
        -:  190:
        2:  191:    int optval = 1;
        2:  192:    if (setsockopt(server_socket, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval)) == -1)
        -:  193:    {
    #####:  194:        perror("setsockopt");
    #####:  195:        exit(0);
        -:  196:    }
        -:  197:
        2:  198:    return server_socket;
        -:  199:}
        -:  200:
        2:  201:void handle_tcp_server(int port, int port2, char opt, char opt2, char **args)
        -:  202:{
        2:  203:    int server_socket = s_socket_tcp(port);
        -:  204:    int server_socket2;
        -:  205:    int client_socket2, client_socket;
        -:  206:
        -:  207:    struct sockaddr_in client_address;
        2:  208:    socklen_t client_address_length = sizeof(client_address);
        -:  209:
        2:  210:    if (listen(server_socket, 5) == -1)
        -:  211:    {
    #####:  212:        perror("listen");
    #####:  213:        exit(EXIT_FAILURE);
        -:  214:    }
        -:  215:
        2:  216:    client_socket = accept(server_socket, (struct sockaddr *)&client_address, &client_address_length);
        2:  217:    if (client_socket == -1)
        -:  218:    {
    #####:  219:        perror("accept");
    #####:  220:        exit(EXIT_FAILURE);
        -:  221:    }
        -:  222:
        2:  223:    if (port2 != 0)
        -:  224:    {
    #####:  225:        server_socket2 = s_socket_tcp(port2);
    #####:  226:        if (listen(server_socket2, 1) == -1)
        -:  227:        {
    #####:  228:            perror("listen");
    #####:  229:            exit(EXIT_FAILURE);
        -:  230:        }
        -:  231:
        -:  232:        struct sockaddr_in client_address2;
    #####:  233:        socklen_t client_address_length2 = sizeof(client_address2);
        -:  234:
    #####:  235:        client_socket2 = accept(server_socket2, (struct sockaddr *)&client_address2, &client_address_length2);
    #####:  236:        if (client_socket2 == -1)
        -:  237:        {
    #####:  238:            perror("accept");
    #####:  239:            exit(EXIT_FAILURE);
        -:  240:        }
        -:  241:    }
        -:  242:
        2:  243:    if (opt == 'i' && opt2 == ' ')
        -:  244:    {
        1:  245:        dup2(client_socket, STDIN_FILENO);
        1:  246:        execv(args[0], args);
        -:  247:    }
        -:  248:
       1*:  249:    else if (opt == 'o' && opt2 == ' ')
        -:  250:    {
    #####:  251:        dup2(client_socket, STDOUT_FILENO);
    #####:  252:        execv(args[0], args);
        -:  253:    }
        -:  254:
        1:  255:    else if (opt == 'b' && opt2 == ' ')
        -:  256:    {
        1:  257:        dup2(client_socket, STDOUT_FILENO);
        -:  258:
        1:  259:        dup2(client_socket, STDIN_FILENO);
    #####:  260:        execv(args[0], args);
        -:  261:    }
        -:  262:
    #####:  263:    else if (opt == 'i' && opt2 == 'u')
        -:  264:    {
    #####:  265:        dup2(client_socket, STDIN_FILENO);
    #####:  266:        uds_client_stream(socket_path, args);
        -:  267:    }
        -:  268:    
    #####:  269:    else if (opt == 'i' && opt2 == 'o')
        -:  270:    {
    #####:  271:        dup2(client_socket, STDIN_FILENO);
    #####:  272:        dup2(client_socket2, STDOUT_FILENO);
    #####:  273:        execv(args[0], args);
        -:  274:    }
        -:  275:
    #####:  276:    else if (opt == 'o' && opt2 == 'i')
        -:  277:    {
    #####:  278:        dup2(client_socket2, STDIN_FILENO);
    #####:  279:        dup2(client_socket, STDOUT_FILENO);
    #####:  280:        execv(args[0], args);
        -:  281:    }
        -:  282:
        1:  283:    close(server_socket);
    #####:  284:    close(client_socket);
    #####:  285:    close(server_socket2);
    #####:  286:    close(client_socket2);
    #####:  287:}
        -:  288://due to declaration of signal_handler function before main
    #####:  289:void signal_handler(int signum)
        -:  290:{
    #####:  291:    printf("Alarm triggered. Closing server.\n");
    #####:  292:    close(udp_socket);
    #####:  293:    exit(0);
        -:  294:}
        -:  295:
        1:  296:void parse_string(const char *str, char *ip, int *port)
        -:  297:{
        -:  298:    // Find the position of the comma
        1:  299:    const char *comma_pos = strchr(str, ',');
        1:  300:    if (!comma_pos)
        -:  301:    {
        -:  302:        // Comma not found, unable to parse
    #####:  303:        *port = -1;
    #####:  304:        return;
        -:  305:    }
        -:  306:
        -:  307:    // Calculate the length of the IP address or hostname
        1:  308:    int ip_length = comma_pos - (str + 4); // Length of "TCPC"
        1:  309:    if (ip_length <= 0)
        -:  310:    {
        -:  311:        // Invalid IP address or hostname
    #####:  312:        *port = -1;
    #####:  313:        return;
        -:  314:    }
        -:  315:
        -:  316:    // Copy the IP address or hostname
        1:  317:    strncpy(ip, str + 4, ip_length);
        1:  318:    ip[ip_length] = '\0'; // Null-terminate the string
        -:  319:
        -:  320:    // Extract the port number and convert it to an integer
        1:  321:    *port = atoi(comma_pos + 1);
        -:  322:
        1:  323:    if(strcmp(ip, "localhost") == 0)
        -:  324:    {
        1:  325:        ip = "127.0.0.1";
        -:  326:    }
        -:  327:}
        -:  328:
    #####:  329:void handle_udp_clinet(int port, int port2, char *host, char **args, int seconds, char opt)
        -:  330:{
        -:  331:    int client_socket;
        -:  332:    struct sockaddr_in server_addr;
        -:  333:    char buffer[BUFFER_SIZE];
        -:  334:    int bytes_sent;
    #####:  335:    socklen_t addr_len = sizeof(server_addr);
        -:  336:
        -:  337:
        -:  338:
        -:  339:    // Create UDP socket
    #####:  340:    client_socket = socket(AF_INET, SOCK_DGRAM, 0);
    #####:  341:    if (client_socket == -1)
        -:  342:    {
    #####:  343:        perror("Socket creation failed");
    #####:  344:        exit(EXIT_FAILURE);
        -:  345:    }
        -:  346:
        -:  347:    // Fill in server address details
    #####:  348:    memset(&server_addr, 0, sizeof(server_addr));
    #####:  349:    server_addr.sin_family = AF_INET;
    #####:  350:    server_addr.sin_port = htons(port);
        -:  351:
    #####:  352:    if (connect(client_socket, (struct sockaddr *)&server_addr, addr_len) == -1)
        -:  353:    {
    #####:  354:        perror("connect");
    #####:  355:        exit(1);
        -:  356:    }
    #####:  357:    if (seconds != 0)
        -:  358:    {
    #####:  359:       signal(SIGALRM, signal_handler);
        -:  360:
        -:  361:        // Set the alarm
    #####:  362:         alarm(seconds);
        -:  363:    }
    #####:  364:    dup2(client_socket, STDOUT_FILENO);
        -:  365:
        -:  366:
    #####:  367:    if(opt == 'u')
    #####:  368:        uds_server_datagram(socket_path, args);
        -:  369:    
    #####:  370:    else if(opt == 's')
    #####:  371:        handle_udp_server(port2, 0, seconds, args, ' ');
        -:  372:    
        -:  373:    else
    #####:  374:        execv(args[0],args);
        -:  375:    
        -:  376:
        -:  377:
        -:  378:    while (1)
        -:  379:    {
    #####:  380:        bytes_sent = sendto(client_socket, buffer, strlen(buffer), 0, (struct sockaddr *)&server_addr, sizeof(server_addr));
    #####:  381:        if (bytes_sent == -1)
        -:  382:        {
    #####:  383:            perror("Send failed");
    #####:  384:            close(client_socket);
    #####:  385:            exit(EXIT_FAILURE);
        -:  386:        }
        -:  387:    }
        -:  388:    // Close socket
        -:  389:    close(client_socket);
        -:  390:}
        -:  391:
        1:  392:void handle_tcp_client(char *host, char *host2, int port, int port2, char opt, char opt2, char **args)
        -:  393:{
        -:  394:
        -:  395:    int client_socket;
        1:  396:    client_socket = socket(AF_INET, SOCK_STREAM, 0);
        -:  397:    struct sockaddr_in server;
        1:  398:    socklen_t socklen = sizeof(server);
        -:  399:
        1:  400:    server.sin_family = AF_INET;
        1:  401:    server.sin_port = htons(port);
        1:  402:    server.sin_addr.s_addr = inet_addr(host);
        -:  403:
        1:  404:    if (connect(client_socket, (struct sockaddr *)&server, socklen) == -1)
        -:  405:    {
        1:  406:        perror("connect");
        1:  407:        exit(1);
        -:  408:    }
        -:  409:
    #####:  410:    if (opt == 'i' && opt2 == ' ')
        -:  411:    {
    #####:  412:        dup2(client_socket, STDIN_FILENO);
    #####:  413:        execv(args[0], args);
        -:  414:    }
        -:  415:
    #####:  416:    else if (opt == 'o' && opt2 == ' ')
        -:  417:    {
    #####:  418:        dup2(client_socket, STDOUT_FILENO);
    #####:  419:        execv(args[0], args);
        -:  420:    }
        -:  421:
    #####:  422:    else if (opt == 'b' && opt2 == ' ')
        -:  423:    {
    #####:  424:        dup2(client_socket, STDOUT_FILENO);
    #####:  425:        dup2(client_socket, STDIN_FILENO);
    #####:  426:        execv(args[0], args);
        -:  427:    }
        -:  428:
    #####:  429:    else if(opt = 'o' && opt2 == 's'){
    #####:  430:        dup2(client_socket, STDOUT_FILENO);
    #####:  431:        uds_server_stream(socket_path, args);
        -:  432:    }
        -:  433:
    #####:  434:    else if(opt = 'o' && opt2 == 't'){
    #####:  435:        dup2(client_socket, STDOUT_FILENO);
    #####:  436:        handle_tcp_server(port2,port,'i', ' ', args);
        -:  437:    }
        -:  438:
    #####:  439:    else if(opt = 'i' && opt2 == 'c'){
    #####:  440:        dup2(client_socket, STDIN_FILENO);
    #####:  441:        uds_client_stream(socket_path, args);
        -:  442:    }
        -:  443:
    #####:  444:    else if(opt = 'i' && opt2 == 'd'){
    #####:  445:        dup2(client_socket, STDIN_FILENO);
    #####:  446:        handle_udp_clinet(port2, 0, host2, args, 0, ' ');
        -:  447:    }
        -:  448:
    #####:  449:    else if(opt = 'o' && opt2 == 'u'){
    #####:  450:        dup2(client_socket, STDOUT_FILENO);
    #####:  451:        handle_udp_server(port2, 0, 0, args, ' ');
        -:  452:    }
        -:  453:
        -:  454:
        -:  455:
        -:  456:
    #####:  457:    if (port2 != '0')
        -:  458:    {
        -:  459:        int client_socket2;
    #####:  460:        client_socket2 = socket(AF_INET, SOCK_STREAM, 0);
        -:  461:        struct sockaddr_in server2;
    #####:  462:        socklen_t socklen2 = sizeof(server2);
    #####:  463:        client_socket2 = socket(AF_INET, SOCK_STREAM, 0);
        -:  464:
    #####:  465:        server2.sin_family = AF_INET;
    #####:  466:        server2.sin_port = htons(port2);
    #####:  467:        server2.sin_addr.s_addr = inet_addr(host2);
        -:  468:
    #####:  469:        if (connect(client_socket2, (struct sockaddr *)&server2, socklen) == -1)
        -:  470:        {
    #####:  471:            perror("connect");
    #####:  472:            exit(1);
        -:  473:        }
        -:  474:
    #####:  475:        if (opt == 'i' && opt2 == 'o')
        -:  476:        {
    #####:  477:            dup2(client_socket, STDIN_FILENO);
    #####:  478:            dup2(client_socket2, STDOUT_FILENO);
    #####:  479:            execv(args[0], args);
        -:  480:        }
        -:  481:
    #####:  482:        else if (opt == 'o' && opt2 == 'i')
        -:  483:        {
    #####:  484:            dup2(client_socket2, STDIN_FILENO);
    #####:  485:            dup2(client_socket, STDOUT_FILENO);
    #####:  486:            execv(args[0], args);
        -:  487:        }
        -:  488:
    #####:  489:        else if (opt == 'i' && opt2 == 's')
        -:  490:        {
    #####:  491:            dup2(client_socket, STDIN_FILENO);
    #####:  492:            handle_tcp_server(port2, port, 'o', ' ', args);
        -:  493:        }
        -:  494:    }
        -:  495:
    #####:  496:    close(client_socket);
    #####:  497:}
        -:  498:
    #####:  499:void handle_udp_server(int port, int port2, int seconds, char **args, char opt)
        -:  500:{
        -:  501:    struct sockaddr_in server_addr, client_addr;
    #####:  502:    socklen_t client_len = sizeof(client_addr);
        -:  503:    char buffer[BUFFER_SIZE];
        -:  504:    int bytes_received;
        -:  505:
        -:  506:    // Create UDP socket
    #####:  507:    if ((udp_socket = socket(AF_INET, SOCK_DGRAM, 0)) == -1)
        -:  508:    {
    #####:  509:        perror("Socket creation failed");
    #####:  510:        exit(EXIT_FAILURE);
        -:  511:    }
        -:  512:
        -:  513:    // Fill in server address details
    #####:  514:    memset(&server_addr, 0, sizeof(server_addr));
    #####:  515:    server_addr.sin_family = AF_INET;
    #####:  516:    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
    #####:  517:    server_addr.sin_port = htons(port);
        -:  518:
        -:  519:    // Bind socket to address
    #####:  520:    if (bind(udp_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1)
        -:  521:    {
    #####:  522:        perror("Socket bind failed");
    #####:  523:        close(udp_socket);
    #####:  524:        exit(EXIT_FAILURE);
        -:  525:    }
        -:  526:
        -:  527:    // Set the signal handler for SIGALRM
    #####:  528:    if (seconds != 0)
        -:  529:    {
    #####:  530:        signal(SIGALRM, signal_handler);
        -:  531:
        -:  532:        // Set the alarm
    #####:  533:        alarm(seconds);
        -:  534:    }
        -:  535:
    #####:  536:    printf("UDP server is running...\n");
    #####:  537:    int count = 0;
        -:  538:    while (1)
        -:  539:    {
        -:  540:        // Receive data from client
    #####:  541:        bytes_received = recvfrom(udp_socket, buffer, BUFFER_SIZE, 0, (struct sockaddr *)&client_addr, &client_len);
        -:  542:
    #####:  543:        if (bytes_received == -1)
        -:  544:        {
    #####:  545:            perror("Receive failed");
    #####:  546:            close(udp_socket);
    #####:  547:        exit(EXIT_FAILURE);
        -:  548:
        -:  549:        }
    #####:  550:        count++;
    #####:  551:        if (count > 4)
        -:  552:        {   
    #####:  553:            dup2(udp_socket, STDIN_FILENO);
        -:  554:
    #####:  555:            if(opt == 'u')
    #####:  556:                uds_client_datagram(socket_path, args);
    #####:  557:            if(opt == 't')
    #####:  558:                handle_tcp_server(port, 0,  'o', ' ', args);
    #####:  559:            if(opt == 'z')
    #####:  560:                uds_client_stream(socket_path, args);
    #####:  561:            if(opt == 's')
    #####:  562:                uds_server_stream(socket_path, args);
        -:  563:            
        -:  564:            else    
    #####:  565:                execv(args[0], args);
        -:  566:        }
        -:  567:    }
        -:  568:}
        -:  569:
        3:  570:int main(int argc, char *argv[])
        -:  571:{
        -:  572:    int opt;
        3:  573:    char *command = NULL;
        3:  574:    char *input = NULL;
        3:  575:    char *output = NULL;
        3:  576:    int port = 0;
        3:  577:    char host[120] = {0};
        3:  578:    char host2[120] = {0};
        -:  579:    int server_socket;
        3:  580:    int both = 0;
        3:  581:    int port2 = 0;
        3:  582:    char *seconds = NULL;
        -:  583:    // Parse command-line arguments
       10:  584:    while ((opt = getopt(argc, argv, "e:i:o:b:t:")) != -1)
        -:  585:    {
       7*:  586:        switch (opt)
        -:  587:        {
        3:  588:        case 'e':
        3:  589:            command = optarg;
        3:  590:            break;
        2:  591:        case 'i':
        2:  592:            input = optarg;
        -:  593:
        2:  594:            break;
        1:  595:        case 'o':
        1:  596:            output = optarg;
        1:  597:            break;
        1:  598:        case 'b':
        1:  599:            both = 1;
        1:  600:            input = optarg;
        1:  601:            output = optarg;
        1:  602:            break;
    #####:  603:        case 't':
    #####:  604:            seconds = optarg;
        -:  605:
    #####:  606:        default:
    #####:  607:            continue;
        -:  608:        }
        -:  609:    }
        -:  610:
        -:  611:    // Create a child process
        3:  612:    pid_t pid = fork();
        -:  613:
        6:  614:    if (pid == -1)
        -:  615:    {
    #####:  616:        perror("fork");
    #####:  617:        return EXIT_FAILURE;
        -:  618:    }
        -:  619:
        6:  620:    if (pid == 0)
        -:  621:    {
        -:  622:        char *args[100]; // Assuming we won't have more than 100 arguments
        3:  623:        int arg_count = 0;
        3:  624:        if (command != NULL)
        -:  625:        {
        3:  626:            char *token = strtok(command, " ");
        9:  627:            while (token != NULL)
        -:  628:            {
        6:  629:                args[arg_count++] = token;
        6:  630:                token = strtok(NULL, " ");
        -:  631:            }
        -:  632:
        3:  633:            args[arg_count] = NULL;
        -:  634:            // Child process
       3*:  635:            if (input == NULL && output == NULL){
    #####:  636:                execv(args[0], args);
        -:  637:            }
        -:  638:
        -:  639:            //input and output with TCPS
        3:  640:            else if (both == 1 && strncmp(input, "TCPS", 4) == 0)
        -:  641:            {
        1:  642:                port = atoi(input + 4);
        1:  643:                handle_tcp_server(port, 0, 'b', ' ', args);
        -:  644:            }
        -:  645:
        -:  646:            //output with TCPS
       2*:  647:            else if (output != NULL && input == NULL && strncmp(output, "TCPS", 4) == 0)
        -:  648:            {
    #####:  649:                port = atoi(output + 4);
    #####:  650:                handle_tcp_server(port, 0, 'o', ' ', args);
        -:  651:            }
        -:  652:
        -:  653:            //input with TCPS
        2:  654:            else if (input != NULL && output == NULL && strncmp(input, "TCPS", 4) == 0) // TCPS AND I
        -:  655:            {
        1:  656:                port = atoi(input + 4);
        1:  657:                handle_tcp_server(port, 0, 'i', ' ', args);
        -:  658:            }
        -:  659:
        -:  660:            //input and output with TCPC
       1*:  661:            else if (both == 1 && strncmp(output, "TCPC", 4) == 0)  
        -:  662:            {
    #####:  663:                parse_string(output, host, &port);
    #####:  664:                handle_tcp_client(host, 0, port, 0, 'b', ' ', args);
        -:  665:            }
        -:  666:
        -:  667:            //input with TCPC
       1*:  668:            else if (input != NULL && output == NULL && strncmp(input, "TCPC", 4) == 0)
        -:  669:            {
    #####:  670:                parse_string(input, host, &port);
    #####:  671:                handle_tcp_client(host, 0, port, 0, 'i', ' ', args);
        -:  672:            }
        -:  673:
        -:  674:            //output with TCPC
       1*:  675:            else if (output != NULL && input == NULL && strncmp(output, "TCPC", 4) == 0)
        -:  676:            {
    #####:  677:                parse_string(output, host, &port);
    #####:  678:                handle_tcp_client(host, 0, port, 0, 'o', ' ', args);
        -:  679:            }
        -:  680:
        -:  681:            //output with UDPC
       1*:  682:            else if (output != NULL && input == NULL && strncmp(output, "UDPC", 4) == 0)
        -:  683:            {
    #####:  684:                parse_string(output, host, &port);
    #####:  685:                handle_udp_clinet(port, 0, host, args, atoi(seconds), ' ');
        -:  686:            }
        -:  687:
        -:  688:            //input with UDPS
       1*:  689:            else if (input != NULL && output == NULL && strncmp(input, "UDPS", 4) == 0)
        -:  690:            {
    #####:  691:                port = atoi(input + 4);
    #####:  692:                handle_udp_server(port, 0, atoi(seconds), args, ' ');
        -:  693:            }
        -:  694:
        -:  695:            //input UDSSD
       1*:  696:            else if (input != NULL && output == NULL && strncmp(input, "UDSSD", 5) == 0)
        -:  697:            {
    #####:  698:                uds_server_datagram(input + 5, args);
        -:  699:            }
        -:  700:
        -:  701:            //input UDSCD
       1*:  702:            else if (input != NULL && output == NULL && strncmp(input, "UDSCD", 5) == 0)
        -:  703:            {
    #####:  704:                uds_client_datagram(input + 5, args);
        -:  705:            }
        -:  706:
        -:  707:            //output UDSSS
       1*:  708:            else if (input == NULL && output != NULL && strncmp(output, "UDSSS", 5) == 0)
        -:  709:            {
    #####:  710:                uds_server_stream(output + 5, args);
        -:  711:            }
        -:  712:
        -:  713:
        -:  714:            //input with TCPC and output with TCPC
       1*:  715:            else if (output != NULL && input != NULL && strncmp(input, "TCPC", 4) == 0 && strncmp(output, "TCPC", 4) == 0)
        -:  716:            {
    #####:  717:                parse_string(input, host, &port);
        -:  718:
    #####:  719:                parse_string(output, host2, &port2);
    #####:  720:                handle_tcp_client(host, 0, port, 0, 'i', 'o', args);
        -:  721:            }
        -:  722:
        -:  723:            //input with TCPC output with TCPS
       1*:  724:            else if (output != NULL && input != NULL && strncmp(input, "TCPC", 4) == 0 && strncmp(output, "TCPS", 4) == 0 )
        -:  725:            {
    #####:  726:                parse_string(input, host, &port);
    #####:  727:                port2 = output + 4;
    #####:  728:                handle_tcp_client(host, 0, port, port2, 'i', 's', args);
        -:  729:            }
        -:  730:
        -:  731:            //input with TCPC output with UDPC
       1*:  732:            else if (output != NULL && input != NULL && strncmp(output, "UDPC", 4) == 0 && strncmp(input, "TCPC", 4) == 0)
        -:  733:            {
    #####:  734:                parse_string(input, host, &port);
    #####:  735:                parse_string(output, host2, &port2);
    #####:  736:                handle_tcp_client(host, host2, port,port2, 'i', 'd', args);
        -:  737:            }
        -:  738:
        -:  739:            //input with TCPC output with UDPC           
       1*:  740:            else if (input != NULL && output != NULL && strncmp(input, "TCPS", 4) == 0 && strncmp(output, "UDPC", 4) == 0)
        -:  741:            {
    #####:  742:                port = atoi(input + 4);
    #####:  743:                handle_tcp_server(port, 0, 'i', ' ', args);
    #####:  744:                parse_string(output, host, &port);
    #####:  745:                handle_udp_clinet(port, 0, host, args, 0,  ' ');
        -:  746:            }
        -:  747:
        -:  748:            //input with TCPC output with USSCS
       1*:  749:            else if (input != NULL && output != NULL && strncmp(input, "TCPC", 4) == 0 && strncmp(output, "UDSCS", 5) == 0)
        -:  750:            {
    #####:  751:                socket_path = output + 5;
    #####:  752:                parse_string(input, host, &port);
        -:  753:                
    #####:  754:                handle_tcp_client(host, 0, port, 0, 'i', 'c', args); 
        -:  755:            }
        -:  756:
        -:  757:
        -:  758:            //input with TCPS  output with TCPS
       1*:  759:            else if (output != NULL && input != NULL && strncmp(output, "TCPS", 4) == 0 && strncmp(input, "TCPS", 4) == 0)
        -:  760:            {
    #####:  761:                handle_tcp_server(input + 4, output +4, 'i', 'o', args);
        -:  762:            }
        -:  763:
        -:  764:            //input with TCPS output with TCPC
        1:  765:            else if (output != NULL && input != NULL && strncmp(output, "TCPC", 4) == 0 && strncmp(input, "TCPS", 4) == 0)
        -:  766:            {
    #####:  767:                parse_string(output, host, &port);
    #####:  768:                port2 = input + 4;
    #####:  769:                handle_tcp_client(host, 0, port, port2, 'o', 's', args);
        -:  770:            }
        -:  771:
        -:  772:            //input with TCPS output with USSCS
       1*:  773:            else if (input != NULL && output != NULL && strncmp(input, "TCPS", 4) == 0 && strncmp(output, "UDSCS", 5) == 0)
        -:  774:            {
    #####:  775:                socket_path = output + 5;
    #####:  776:                parse_string(input, host, &port);
        -:  777:                
    #####:  778:                handle_tcp_server(port, 0, 'i', 'u', args); 
        -:  779:            }
        -:  780:
        -:  781:            
        -:  782:            //input with UDPS output with UDPS
        1:  783:            else if (input != NULL && output != NULL && strncmp(input, "UDPS", 4) == 0 && strncmp(output, "UDPC", 4) == 0){
    #####:  784:                parse_string(output, host, port);
    #####:  785:                handle_udp_clinet(port, port2, host, args, atoi(seconds), 's');
        -:  786:            }
        -:  787:
        -:  788:            //input with UDPS output with UDSCD
        1:  789:            else if (input != NULL && output != NULL && strncmp(input, "UDPS", 4) == 0 && strncmp(output, "UDSCD", 5) == 0)
        -:  790:            {
    #####:  791:                socket_path = output + 5;
    #####:  792:                parse_string(input, host, &port);
    #####:  793:                handle_udp_server(port, 0, atoi(seconds), args, 'u'); 
        -:  794:            }
        -:  795:
        -:  796:            //input with UDPS output with UDSSS
        1:  797:            else if (input != NULL && output != NULL && strncmp(input, "UDPS", 4) == 0 && strncmp(output, "UDSSS", 5) == 0)
        -:  798:            {
    #####:  799:                socket_path = output + 5;
    #####:  800:                parse_string(input, host, &port);
    #####:  801:                handle_udp_server(port, 0, atoi(seconds), args, 's'); 
        -:  802:            }
        -:  803:
        -:  804:            //input with UDPS output with UDSCS         
        1:  805:            else if (input != NULL && output != NULL && strncmp(input, "UDPS", 4) == 0 && strncmp(output, "UDSCS", 5) == 0)
        -:  806:            {
    #####:  807:                socket_path = output + 5;
    #####:  808:                parse_string(input, host, &port);
    #####:  809:                handle_udp_server(port, 0, atoi(seconds), args, 'z'); 
        -:  810:            }
        -:  811:
        -:  812:            //input with UDPS output wuth TCPS
        1:  813:            else if(input != NULL && output != NULL && strncmp(input, "UDPS", 4) == 0 && strncmp(output, "TCPS", 4) == 0)
        -:  814:            {
    #####:  815:                handle_udp_server(input + 4, output +4, atoi(seconds), args, 't');
        -:  816:
        -:  817:            }
        -:  818:
        -:  819:            //input with UDPS output with TCPC
        1:  820:            else if (input != NULL && output != NULL && strncmp(input, "UDPS", 4) == 0 && strncmp(output, "TCPC", 4) == 0)
        -:  821:            {
        1:  822:                port = atoi(input + 4);
        1:  823:                parse_string(output, host, &port);
        1:  824:                handle_tcp_client(host, 0, port, port2, 'o', 'u', args);
        -:  825:            }
        -:  826:
        -:  827:
        -:  828:            //input UDSSD output with UDPC
    #####:  829:            else if (input != NULL && output != NULL && strncmp(input, "UDSSD", 5) == 0 && strncmp(output, "UDPC", 4) == 0)
        -:  830:            {
    #####:  831:                socket_path = input + 5;
    #####:  832:                parse_string(output, host, &port);
        -:  833:                
    #####:  834:                handle_udp_clinet(port, 0, host, args, 0,'u'); 
        -:  835:            }
        -:  836:
        -:  837:
        -:  838:            //input UDSSS ouput with TCPC
    #####:  839:            else if (input != NULL && output != NULL && strncmp(input, "UDSSS", 5) == 0 && strncmp(output, "TCPC", 4) == 0)
        -:  840:            {
    #####:  841:                socket_path = input + 5;
    #####:  842:                parse_string(output, host, &port);
        -:  843:                
    #####:  844:                handle_tcp_client(host, 0, port, 0, 'o', 's', args);
        -:  845:
        -:  846:            }
        -:  847:
        -:  848:            else
        -:  849:            {
    #####:  850:                printf("else");
    #####:  851:                print_usage(argv[0]);
    #####:  852:                return EXIT_FAILURE;
        -:  853:            }
        -:  854:        }
        -:  855:
        -:  856:        //without '-e'
        -:  857:        else
        -:  858:        {
        -:  859:            char *args[100];
    #####:  860:            for (int i = 1; i < argc; ++i)
        -:  861:            {
    #####:  862:                size_t length = strlen(argv[i]) + 1;
    #####:  863:                memcpy(args[i - 1], argv[i], length);
        -:  864:            }
        -:  865:
    #####:  866:            args[argc - 1] = NULL;
    #####:  867:            execv(args[0], args);
        -:  868:        }
        -:  869:    }
        -:  870:
        -:  871:    else
        -:  872:    {
        -:  873:        // Parent process
        -:  874:        int status;
        3:  875:        if (waitpid(pid, &status, 0) == -1)
        -:  876:        {
    #####:  877:            perror("waitpid");
    #####:  878:            return EXIT_FAILURE;
        -:  879:        }
        -:  880:
        3:  881:        if (WIFEXITED(status))
        -:  882:        {
        3:  883:            printf("Child exited with status %d\n", WEXITSTATUS(status));
        -:  884:        }
        -:  885:
    #####:  886:        else if (WIFSIGNALED(status))
        -:  887:        {
    #####:  888:            printf("Child killed by signal %d\n", WTERMSIG(status));
        -:  889:        }
        -:  890:    }
        -:  891:
        3:  892:    return EXIT_SUCCESS;
        -:  893:}
